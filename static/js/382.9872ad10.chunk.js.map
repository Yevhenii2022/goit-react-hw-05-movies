{"version":3,"file":"static/js/382.9872ad10.chunk.js","mappings":"mSAEaA,EAAgBC,EAAAA,EAAAA,IAAH,uHAQbC,EAAWD,EAAAA,EAAAA,GAAH,uJAQRE,EAAaF,EAAAA,EAAAA,EAAH,0KASVG,EAAaH,EAAAA,EAAAA,IAAH,+F,kBCyCvB,EAzDiB,WAAO,IAAD,IACbI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwBE,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACRH,GAAa,IACbI,EAAAA,EAAAA,IAAkBV,GACfW,MAAK,SAAAC,GAAQ,OAAIR,EAAQQ,EAASC,KAAKV,KAA1B,IACbW,SAAQ,WACPR,GAAa,EACd,GACJ,GAAE,CAACN,IAEJ,IAAMe,EAAQ,oBAAGR,EAASS,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,IAEnCC,GAAc,OAAIf,GAAMgB,MAAM,EAAG,IAEvC,OACE,gCACGhB,EAAKiB,OAAS,GACb,iCACE,SAACvB,EAAD,UACGqB,EAAYG,KAAI,gBAAGC,EAAH,EAAGA,GAAOC,GAAV,mBACf,SAAC,MAAD,UAAwBA,GAARD,EADD,OAInB,SAACvB,EAAD,WACE,SAAC,KAAD,CACEyB,GAAE,kBAAaxB,GACfyB,KAAK,QACLT,MAAO,CAAEC,KAAMF,WAKrB,iCACE,SAACjB,EAAD,UAAY,2BACZ,SAACC,EAAD,WACE,SAAC,KAAD,CACEyB,GAAE,kBAAaxB,GACfyB,KAAK,QACLT,MAAO,CAAEC,KAAMF,UAKtBV,IACC,SAACV,EAAD,WACE,SAAC,KAAD,QAKT,C,mMChEK+B,EAAW,+BACXC,EAAU,mCAAhB,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,UAAAA,CAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAA+BC,EAA/B,+BAAqC,GAAIC,EAAzC,+BAAkD,CAAC,EAAnD,kBAE2BC,EAAAA,EAAAA,IAAUF,EAAKC,GAF1C,cAEUlB,EAFV,yBAGWA,GAHX,gCAKIoB,QAAQC,IAAI,KAAMC,SAClBC,QAAQC,OAAO,IAAIC,MAAM,cAN7B,iFAUO,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,8FACQV,EAAgB,GAAD,OACvBF,EADuB,uCACgBC,IAFvC,0GAMA,SAAeY,EAAtB,+CAAO,OAAP,oBAAO,WAAgCC,GAAhC,iFACQZ,EAAgB,GAAD,OACvBF,EADuB,iCACUC,EADV,iCAC0Ca,EAD1C,gCADvB,0GAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCzC,GAAjC,iFACQ4B,EAAgB,GAAD,OACvBF,EADuB,kBACL1B,EADK,oBACc2B,EADd,oBADvB,0GAMA,SAAejB,EAAtB,+CAAO,OAAP,oBAAO,WAAiCV,GAAjC,iFACQ4B,EAAgB,GAAD,OACvBF,EADuB,kBACL1B,EADK,4BACsB2B,EADtB,oBADvB,0GAMA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAAiC1C,GAAjC,iFACQ4B,EAAgB,GAAD,OACvBF,EADuB,kBACL1B,EADK,4BACsB2B,EADtB,oBADvB,0G","sources":["pages/CastPage/CastPage.styled.jsx","pages/CastPage/CastPage.jsx","services/moviesAPI.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const LoaderWrapper = styled.div`\n  position: relative;\n  width: 160px;\n  height: 160px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n\nexport const CastList = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  grid-column-gap: 20px;\n  grid-row-gap: 20px;\n  padding: 20px;\n`;\n\nexport const NoCastText = styled.p`\n  font-size: 22px;\n  font-weight: 400;\n  text-transform: uppercase;\n  letter-spacing: 15px;\n  text-align: center;\n  padding: 10px 0 20px 0;\n`;\n\nexport const BtnWrapper = styled.div`\n  padding-bottom: 20px;\n  display: flex;\n  justify-content: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { fetchMovieCredits } from 'services/moviesAPI';\nimport { ActorCard, ButtonLink, Loader } from '../../components/index';\nimport {\n  LoaderWrapper,\n  CastList,\n  NoCastText,\n  BtnWrapper,\n} from './CastPage.styled';\n\nconst CastPage = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchMovieCredits(movieId)\n      .then(response => setCast(response.data.cast))\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [movieId]);\n\n  const fromPage = location.state?.from ?? '/';\n\n  const reducedCast = [...cast].slice(0, 10);\n\n  return (\n    <>\n      {cast.length > 0 ? (\n        <>\n          <CastList>\n            {reducedCast.map(({ id, ...props }) => (\n              <ActorCard key={id} {...props} />\n            ))}\n          </CastList>\n          <BtnWrapper>\n            <ButtonLink\n              to={`/movies/${movieId}`}\n              text=\"Close\"\n              state={{ from: fromPage }}\n            />\n          </BtnWrapper>\n        </>\n      ) : (\n        <>\n          <NoCastText>Actors cast is absent</NoCastText>\n          <BtnWrapper>\n            <ButtonLink\n              to={`/movies/${movieId}`}\n              text=\"Close\"\n              state={{ from: fromPage }}\n            />\n          </BtnWrapper>\n        </>\n      )}\n      {isLoading && (\n        <LoaderWrapper>\n          <Loader />\n        </LoaderWrapper>\n      )}\n    </>\n  );\n};\n\nexport default CastPage;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '220d205b9d425bbb3fa953ef6e87c55b';\n\nasync function fetchMoviesData(url = '', config = {}) {\n  try {\n    const response = await axios.get(url, config);\n    return response;\n  } catch (error) {\n    console.log(error.message);\n    Promise.reject(new Error('Not found'));\n  }\n}\n\nexport async function fetchTrendingMovies() {\n  return await fetchMoviesData(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n}\n\nexport async function fetchSearchMovie(searchQuery) {\n  return await fetchMoviesData(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`\n  );\n}\n\nexport async function fetchMovieDetails(movieId) {\n  return await fetchMoviesData(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport async function fetchMovieCredits(movieId) {\n  return await fetchMoviesData(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n}\n\nexport async function fetchMovieReviews(movieId) {\n  return await fetchMoviesData(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n}\n"],"names":["LoaderWrapper","styled","CastList","NoCastText","BtnWrapper","movieId","useParams","useState","cast","setCast","isLoading","setIsLoading","location","useLocation","useEffect","fetchMovieCredits","then","response","data","finally","fromPage","state","from","reducedCast","slice","length","map","id","props","to","text","BASE_URL","API_KEY","fetchMoviesData","url","config","axios","console","log","message","Promise","reject","Error","fetchTrendingMovies","fetchSearchMovie","searchQuery","fetchMovieDetails","fetchMovieReviews"],"sourceRoot":""}